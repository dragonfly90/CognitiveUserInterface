(set-task "actr.tasks.ActrInterface.SIMCogACTR")


(add-dm
    (letter isa chunk)
    (startRead isa chunk)
    (attend isa chunk)
    (read isa chunk)
    (found isa chunk)
    (nextLabel isa chunk)
    (find-first isa chunk)
    (attend-first isa chunk)
    (find-next isa chunk)
    (attend-next isa chunk)
    (attend-next2 isa chunk)
    (attend-maxpoint isa chunk)
    (findColor isa chunk)
    (attendcolor isa chunk)
    (mygoal isa best-point state startRead labeldata "B"))

(p associate-color-with-label
    =goal>
        isa best-point
        state startRead
    ?visual>
        state free
==>
    +visual-location>
        isa visual-location
        screen-x highest
        screen-y highest
    =goal>
        state color-association
)

(p attend-label
    =goal>
        isa best-point
        state color-association
    =visual-location>
        isa visual-location
        screen-x     =screen-x
        screen-y     =screen-y
    ?visual>
        state free
==>
    +visual>
        isa move-attention
        screen-pos =visual-location
    =goal>
        state attend
        currentx =screen-x
        currenty =screen-y
)

(p read-label
    =goal>
        isa best-point
        state attend
    =visual>
        isa text
        value =letter
    ?imaginal>
        state free
==>
    =goal>
        state read
    +imaginal>
        isa array
        letter =letter
        !output!(=letter)
    -visual-location>
    -visual>
)

(p find-Exact-Label1
    =goal>
        isa best-point
        state read
        labeldata =clabeldata
    =imaginal>
        isa array
        letter =clabeldata
==>
    =goal>
        isa best-point
        state found
    -imaginal>
)

(p find-Exact-Label2
    =goal>
        isa best-point
        state read
        labeldata =clabeldata
    =imaginal>
        isa array
        - letter =clabeldata
==>
    =goal>
        isa best-point
        state nextLabel
    -imaginal>
)

(p find-Next-Label
    =goal>
        isa best-point
        state nextLabel
        currentx =currentx
        currenty =currenty
    ?visual>
        state free
==>
    +visual-location>
        isa visual-location
        screen-x =currentx    
        < screen-y =currenty
        screen-y highest
    =goal>
        state color-association
)


(p find-Color
    =goal>
        isa best-point
        state found
        currentx =currentx
        currenty =currenty
    ?visual>
        state free
==>
    +visual-location>
        isa visual-location
        screen-y =currenty
        < screen-x =currentx    
        screen-x highest
    =goal>
        state findColor
)

(p attend-color
    =goal>
        isa best-point
        state findColor
    =visual-location>
        isa visual-location
    ?visual>
        state free
==>
    +visual>
        isa move-attention
        screen-pos =visual-location
    =goal>
        state attendcolor
)

(p read-color
    =goal>
        isa best-point
        state attendcolor
    =visual>
        isa rectangle
        color =currentcolor
    ?imaginal>
        state free
==>
    =goal>
        state find-first
        color =currentcolor
    -visual-location>
    -visual>
        !output!(=currentcolor)
)

(p find-first-point
    =goal>
        isa            best-point
        state          find-first
        color =currentcolor
    ?visual>
        state free
==>
    =goal>
        state         attend-first
    +visual-location>
        isa           visual-location
        screen-x      lowest
        color  =currentcolor)

(p shift-attention-first-point
    =goal> 
        ISA         best-point
        state      attend-first
    =visual-location>
        isa visual-location
        screen-x =screen-x
        screen-y =screen-y
        
    ?visual>
        state free
        buffer empty
==>
        
    +visual>
        isa       move-attention
        screen-pos =visual-location
    =visual-location>
        
        
)

(p attend-first-point
    =goal>
        isa           best-point
        state         attend-first
    =visual-location>
        isa          visual-location
        screen-x     =screen-x
        screen-y     =screen-y
    =visual>
==>
    !eval! (print (list :first =screen-x =screen-y))
    =goal>
        greatest-x     =screen-x
        greatest-y     =screen-y
        state          find-next
    -visual-location>
    -visual>
)

(p find-next-point
    =goal>
        isa           best-point
        state         find-next
        greatest-x    =screen-x
        color =currentcolor
    ?visual>
        state          free
==>
    =goal>
        state         attend-next
    +visual-location>
        isa            visual-location
        screen-x      lowest
        > screen-x       =screen-x
        color =currentcolor
)

(p find-Max-point
    ?visual-location>
        state error
    =goal>
        isa           best-point
        state         attend-next
        greatest-y    =current-y
        color =currentcolor
    ?visual>
        state          free
==>
    =goal>
        state attend-maxpoint
    +visual-location>
        isa visual-location       
        screen-y  =current-y
        color =currentcolor
)

(p shift-attention-Maxpoint
    =goal> 
        ISA         best-point
        state     attend-maxpoint
    =visual-location>
        isa visual-location
        screen-x =screen-x
        screen-y =screen-y
    ?visual>
        state free
        buffer empty
==>
    =goal>
        state focuseMax
    +visual>
        isa       move-attention
        screen-pos =visual-location
    =visual-location>
)

(p endtask
    =goal>
        state focuseMax
    =visual-location>
        isa visual-location
        screen-x =screen-x
        screen-y =screen-y
    =visual>
==>
    =goal>
        state final
    -visual-location>
    -visual>
)



(p shift-attention-point
    =goal> 
        ISA         best-point
        state     attend-next
    =visual-location>
        isa visual-location
        screen-x =screen-x
        screen-y =screen-y
    ?visual>
        state free
        buffer empty
==>
    =goal>
        state attend-next2
    +visual>
        isa       move-attention
        screen-pos =visual-location
    =visual-location>
)

(p attend-point-save
    =goal>
        isa           best-point
        state         attend-next2
        greatest-y    =current-y
    =visual-location>
        isa           visual-location
        screen-x      =screen-x
        screen-y      =screen-y
        > screen-y      =current-y
    =visual>
==>
    =goal>
        greatest-x    =screen-x
        greatest-y    =screen-y
        state         find-next
    -visual-location>
    -visual>
    !eval! (print (list :next-save =screen-x =screen-y))
)

(p attend-point-skip
    =goal>
        isa           best-point
        state         attend-next2
        greatest-y    =current-y
    =visual-location>
        isa            visual-location
        screen-x       =screen-x
        screen-y       =screen-y
        <= screen-y       =current-y
    =visual>
==>
    =goal>
        greatest-x    =screen-x
        state         find-next
    -visual-location>
    -visual>
    !eval! (print (list :next-skip =screen-x =screen-y))
)


(goal-focus mygoal)